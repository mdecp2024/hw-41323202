var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323202 \n 個人網站: https://mdecp2024.github.io/hw-41323202/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'W7', 'text': '建立brython \n \n 簡單程式 \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'w10', 'text': '題目一:利用 \n n = 5 # 總共的行數 \nspace = \'_\' for i in range(n): # 對於每一行 # 印出空格 \nprint(space * (n - i - 1), end=\'\') # 在每行前面印出空格 # 印出星號 print(\'*\' * (2 * i + 1)) # 每行印出 2*i + 1 個星號 \n 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行 \n \n \n 題目二:針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應 \n \n 題目三: 利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行 \n \n 過程: \n Brython 頁面--到自己的Brython頁面，把程式丟上去，按執行 \n SciTE 編輯器--把程式丟上去，储存到Y:—tmp—python_ex，按執行 \n 命令提示字元視窗--指令:cd—cd tmp—cd python_ex—python w10.py，按enter \n Jupyter Lab --在命令提示字元視窗輸入指令:cd notebook—jupyter lab，按enter，選notebook，按三角形執行 \n Codespaces--新增檔案，新增終端機，執行指令:python 02.py，按enter \n 心得:要開始做第一題的時候在思考之前學過的五種方式分別是什麼，後來經過一番研究後更佳了解要如何運用，在執行的過程中遇到的問題就是在" SciTE 編輯器"沒辦法執行，結果是要先儲存到python_ex才能執行，第二個遇到的問題就是不知道要麼啟動Jupyter Lab，後來才發現是要在"命令提示字元視窗"開啟；在題目二的時候發現正確變數命名與違反變數命名的區別；在題目三的時候了解倒也能運用程式計算物理及微積分的題目。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '題目一 : 將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域 \n \n \n 題目二 : 利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域 \n \n \n 心得:在製作的過程中如果不會寫的程式就可以問ChatGPT，雖然ChatGPT很方便，但還是會遇到一些問題，例如題目一的問題就是它的圓形會變得像橢圓形一樣，有時候甚至還會不對稱；題目二遇到的問題就是寫出來的成可能變成一個紅色或藍色的點，解決方法就是要多加一些條件或請他重寫一個程式就可以完成了。 \n 隨堂測驗: \n 列出數字: \n n=11 # 總共的行數\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(",x,",",y,")",sep="") \n 繪製棋盤: \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth = 11\nheight = 11\n\n"\'\nctx.lineWidth = 1\nctx.strokeStyle = \'#000000\'\nctx.beginPath()\n#ctx.rect(i*gs, j*gs, gs, gs)\nctx.rect(0, 0, 150, 100)\nctx.stroke()\n"\'    \nfor i in range(width):\n    for j in range(height):\n        #dRect(i*gs,j*gs,gs,gs,1,"lightgrey")\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \'lightgrey\'\n        ctx.beginPath();\n        ctx.rect(i*gs,j*gs,gs,gs)\n        ctx.stroke();\n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '第一題:Text, questions, and art (文字、問題和藝術) \n 說明:Strings, input(), and print() (字串、input()和print()) \n input()程式範例: What\'s your name? \n input("What\'s your name?") \n print()程式範例: cat \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___") \n \n 第二題:Events and favorites(活動和最愛) \n 說明:Variables and string concatenation(變數和字串連接) \n 範例程式: 名字 \n first_name = "yu" #變數first_name為"自己的姓"\nlast_name  = "chang" #變數last_name為"自己的名"\nprint (first_name) #列印變數first_name\nprint (last_name) #列印變數last_name \n 範例程式: 名字+最愛的食物 \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值) \n \n 第三題:In a bookstore(在書店) \n 說明:Lists and if... in... / else... (列表和 if... in... / else...) \n 範例程式: if \n programming_books = ["Learn python", "Python for all",  "Intro to python"]\nprint (programming_books)\nwanted_book = input("Hi! What book would you like to buy?")\nprint (wanted_book)\nif wanted_book in programming_books:\n    print ("Yes, we sell it!")\nelse:\n    print ("Sorry, we don\'t sell that book") \n \n 第四題:Grocery shopping(雜貨店購物) \n 說明:List methods: .append() and .remove() (列表方法: .append() and .remove()) \n 範例程式: append() and remove() \n shopping_list = ["carrots", "chocolate", "olives"]\nprint (shopping_list)\nnew_item = input("What else do I have to buy?")\n\nif new_item in shopping_list:\n    print (new_item + " is/are already in the shopping list")\n    print (shopping_list) \nelse:\n    shopping_list.append(new_item)\n    print (shopping_list)\n    item_to_remove = input("What do I have to remove?")\n\nif item_to_remove in shopping_list:\n    shopping_list.remove(item_to_remove)\n    print (shopping_list)\nelse:\n    print (item_to_remove + " is/are not in the list")\n    print (shopping_list) \n \n 第五題:Customizing the burger menu(自訂漢堡菜單) \n 說明:List methods: .index(), .pop(), and .insert() (列表方法: .index(), .pop(), and .insert()) \n 範例程式: menu \n todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"\nside_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index) #列印side_dish_index  列印他在第幾位\ntodays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條\nprint (todays_menu) #列印今日菜單 \n \n 第六題: Traveling around the world (環遊世界 ) \n 說明: List slicing(清單切片) \n 範例程式: 城市 \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]\nprint (cities)\nprint (cities[1])\nprint (cities[1:4])\nprint (cities[1:4:2])\nprint (cities[0:3])\nprint (cities[:3])\nprint (cities[2:5])\nprint (cities[2:])\nprint (cities[0:5:2])\nprint (cities[::2])\nprint (cities[4])\nprint (cities[-1])\nprint (cities[-4:-1])\ncities[3:0:-1]\ncities[-2:-5:-1]\nprint (cities[::-1]) \n \n 第七題: Senses, planets, and a house(感官、行星和房子) \n 說明: Changing, adding, and removing list elements using slicing(使用切片更改、新增和刪除清單元素) \n 範例程式: 感官 \n senses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint (senses)\nsenses[1] = "smell"\nprint (senses)\nsenses[3:5] = ["taste", "touch"]\nprint (senses)\nsenses[0:3:2] = ["sight", "hearing"]\nprint (senses) \n 範例程式: 行星 \n planets = ["Mercury", "Mars", "Earth", "Neptune"]\nprint (planets)\nplanets = planets + ["Jupiter"]\nprint (planets)\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\nprint (planets)\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\nprint(planets) \n 範例程式: 房子 \n \n 第八題: My friends\' favorite dishes(我朋友最喜歡的菜) \n 說明: for ... in range() (在...範圍內()) \n 範例程式: 菜 \n friends = ["Geetha", "Luca", "Daisy", "Juhan"]\ndishes  = ["sushi", "burgers", "tacos", "pizza"]\nprint ("My friends\' names are:")\nprint (friends)\nfor index in range (0,4):\n    print ("index:  " + str(index))\n    print ("friend: " + friends[index])\n    print ("Their favorite dishes are:")\nprint (dishes)\nfor index in range (0,4):\n    print ("index:  " + str(index))\n    print ("dish: " + dishes[index])\n    for index in range (0,4):\n    print ("My friend " + friends[index] + "\'s favorite dish is " + dishes[index]) \n \n 第九題: At the zoo(在動物園) \n 說明: For loop with if... == ... / else(在迴圈 如果.../其他) \n 程式範例: 動物 \n animals = ["giraffe", "penguin", "dolphin"]\nprint (animals)\n# for each position in the list\nfor i in range (0, len(animals)):\n    print ("-- Beginning of loop --")\n    # print each element and its position\n    print ("The element in position " + str(i) + " is " + animals[i])\n    wanted_to_see = "penguin"\n    # for each position in the list\nfor i in range (0, len(animals)):\n    # if the current animal is what you really wanted to see\n    if animals[i] == wanted_to_see:\n        # print out that that\'s the animal you really wanted to see\n        print ("I saw a " + animals[i] + " and I really wanted to see it!")\n    # if the current animal is not what you really wanted to see\n    else:\n        # just print out that you saw it\n        print ("I saw a " + animals[i])\n     \n 第十題: Where are my gloves?(我的手套在哪?) \n 說明:For loop for searching(用搜尋的For循環) \n 程式範例: 配件 \n accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]\nprint (accessories)\n# for each position in the list\nfor i in range (len(accessories)):\n    #print each elements and its position\n    print ("The element "  + accessories[i] + " is in position " + str(i))\n    # for each position in the list\nfor i in range (len(accessories)):\n    # if the length of the element equals 6\n    if len(accessories[i]) == 6:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")\n        # for each position in the list\nfor i in range (len(accessories)):\n    # if the length of the element is less than 6\n    if len(accessories[i]) < 6:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")  \n        # defining the threshold\nn_of_characters = 6 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the length of the element is greater than the threshold\n    if len(accessories[i]) > n_of_characters:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")\n        ing the threshold\nn_of_characters = 6 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the length of the element is not equal to the threshold\n    if len(accessories[i]) != n_of_characters:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))\n        # defining the threshold\nposition = 2 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the position of the element is less then or equal to to the threshold\n    if i <= position:\n        # print the element, its position, and its position characteristic\n        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))\n        # defining the threshold\nposition = 2 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the position of the element is greater then or equal to to the threshold\n    if i >= position:\n        # print the element, its position, and its position characteristic\n        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position)) \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': 'w13 \n 用brythony做出兩個200*200的重疊紅色正方形 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 200\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth=1\nheight=1\n\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n     \nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs+100,j*gs+100,gs,gs)\n     ctx.stroke();\n \n \n w13_ai 正方相接一圓，第一個正方形外加一線 \n \n w13_hw 在圓的各區域著色 \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '三個圓的區域塗色 \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n \n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。\n    返回畫布元素和它的 2D 繪圖上下文。\n    """\n    # 創建一個 canvas 元素，並設置其寬度與高度\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    # 將創建的 canvas 元素添加到指定的 HTML div 元素中\n    brython_div = doc[id]  # 獲取指定 id 的 div 元素\n    brython_div <= canvas  # 將 canvas 插入到該 div 中\n     \n    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口\n    ctx = canvas.getContext("2d")\n     \n    # 返回畫布和它的 2D 繪圖上下文\n    return canvas, ctx\n \n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    """\n    生成一個隨機的 RGB 顏色字符串。\n    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。\n    """\n    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)\n    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)\n    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)\n    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串\n \n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    """\n    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。\n    (cx, cy) 為圓心坐標，r 為圓的半徑。\n    """\n    # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n \n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2,x3, y3, r3):\n    """\n    根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。\n    x1, y1, r1 是圓1的圓心坐標和半徑\n    x2, y2, r2 是圓2的圓心坐標和半徑\n    """\n    # 初始化畫布，創建並取得畫布和其 2D 上下文\n    canvas, ctx = initialize_canvas(400, 400)\n     \n    # 清空畫布，以便重新繪製\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n     \n    # 顏色區域存儲字典，存儲不同區域的顏色\n    color_dict = {}\n \n    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素\n    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標\n        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色\n        current_color = None \n         \n        # 遍歷當前行中的每個像素點 (px, py)\n        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標\n            # 判斷該點是否在圓1內\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            # 判斷該點是否在圓2內\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            \n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n             \n            if in_circle1 and in_circle2:\n                # 如果點同時在兩個圓內，則是交集區域\n                if "intersection" not in color_dict:\n                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色\n                    color_dict["intersection"] = random_color_generator()\n                # 設置當前掃描線的顏色為交集區域的顏色\n                current_color = color_dict["intersection"]\n            elif in_circle2 and in_circle3:\n                # 如果點同時在兩個圓內，則是交集區域\n                if "intersection1" not in color_dict:\n                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色\n                    color_dict["intersection1"] = random_color_generator()\n                # 設置當前掃描線的顏色為交集區域的顏色\n                current_color = color_dict["intersection1"]\n            elif in_circle1:\n                # 如果點只在圓1內，則是圓1的區域\n                if "circle1" not in color_dict:\n                    # 如果還沒有為圓1分配顏色，則分配一個隨機顏色\n                    color_dict["circle1"] = random_color_generator()\n                # 設置當前掃描線的顏色為圓1區域的顏色\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                # 如果點只在圓2內，則是圓2的區域\n                if "circle2" not in color_dict:\n                    # 如果還沒有為圓2分配顏色，則分配一個隨機顏色\n                    color_dict["circle2"] = random_color_generator()\n                # 設置當前掃描線的顏色為圓2區域的顏色\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                # 如果點只在圓2內，則是圓2的區域\n                if "circle3" not in color_dict:\n                    # 如果還沒有為圓2分配顏色，則分配一個隨機顏色\n                    color_dict["circle3"] = random_color_generator()\n                # 設置當前掃描線的顏色為圓2區域的顏色\n                current_color = color_dict["circle3"]\n            else:\n                # 如果點不在任何圓內，則是背景區域\n                current_color = "white"  # 背景色設為白色\n            \n \n            # 設置當前像素的顏色並進行填充\n            ctx.fillStyle = current_color\n            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n \n# 直接設定圓心和半徑\nx1, y1, r1 = 100, 200, 75  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 200, 200, 75  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 300, 200, 75  # 圓2：圓心 (250, 200)，半徑 100\n \n# 呼叫畫圓函式，並繪製兩個圓\ndraw_circles(x1, y1, r1, x2, y2, r2,x3, y3, r3)\n\n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w5', 'text': '瞭解\xa0 Python 變數命名法則: \n help_print.py \n help_range.py \n triangle_star.py \n \n 以下是用 Python 生成 20 個最簡單的五階金字塔（以  *  表示）的程式碼： \n def print_pyramid(levels):\n    for i in range(levels):\n        spaces = \' \' * (levels - i - 1)\n        stars = \'*\' * (2 * i + 1)\n        print(spaces + stars)\n\n# 設定金字塔的層數\nlevels = 5\n\n# 生成 20 個五階金字塔\nfor j in range(20):\n    print(f"金字塔 {j + 1}:")\n    print_pyramid(levels)\n    print()  # 每個金字塔之間留空行\n \n 以下是完整的程式碼和註解： \n n = 5  # 總共的行數\n \nfor i in range(n):  # 對於每一行\n    # 印出空格\n    print(\' \' * (n - i - 1), end=\'\')  # 在每行前面印出空格\n    # 印出星號\n    print(\'*\' * (2 * i + 1))  # 每行印出 2*i + 1 個星號 \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '操作步驟： \n 下載\xa0 python_2025_lite.7z \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \n \xa0 雙點擊 start_ipv6.bat \n 利用 Python 將正方體物件排列進入 CoppeliaSim 模擬場景:\xa0 zmq_remote_api_ex_cube_triangle.7z \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 開啟 python_2025_lite - data - CoppeliaSim - coppeliaSim,exe \xa0模擬場景 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \xa0 \n \xa0 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};